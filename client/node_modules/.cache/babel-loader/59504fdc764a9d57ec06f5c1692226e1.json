{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nfunction fileExists(filepath, options, done) {\n  if (typeof options === 'function') {\n    done = options;\n    options = {};\n  }\n\n  if (!done) {\n    return new Promise((resolve, reject) => {\n      fs.stat(fullPath(filepath, options), (err, stats) => {\n        if (err) {\n          return err.code === 'ENOENT' ? resolve(false) : reject(err);\n        }\n\n        resolve(stats.isFile());\n      });\n    });\n  }\n\n  fs.stat(fullPath(filepath, options), (err, stats) => {\n    if (err) {\n      return err.code === 'ENOENT' ? done(null, false) : done(err);\n    }\n\n    done(null, stats.isFile());\n  });\n}\n\nfileExists.sync = function fileExistsSync(filepath, options = {}) {\n  const filePath = filepath || '';\n\n  try {\n    return fs.statSync(fullPath(filePath, options)).isFile();\n  } catch (e) {\n    // Check exception. If ENOENT - no such file or directory ok, file doesn't exist.\n    // Otherwise something else went wrong, we don't have rights to access the file, ...\n    if (e.code != 'ENOENT') {\n      throw e;\n    }\n\n    return false;\n  }\n};\n\nfunction fullPath(filepath, options = {}) {\n  const root = options.root;\n  return root ? path.join(root, filepath) : filepath;\n}\n\nmodule.exports = fileExists;","map":{"version":3,"sources":["C:/Users/AYORINDE JOHN/Desktop/smarthub files/smarthub/react-apps/music/node_modules/file-exists/index.js"],"names":["fs","require","path","fileExists","filepath","options","done","Promise","resolve","reject","stat","fullPath","err","stats","code","isFile","sync","fileExistsSync","filePath","statSync","e","root","join","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASE,UAAT,CAAqBC,QAArB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8C;AAC5C,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,IAAI,GAAGD,OAAP;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,MAAAA,EAAE,CAACU,IAAH,CAAQC,QAAQ,CAACP,QAAD,EAAWC,OAAX,CAAhB,EAAqC,CAACO,GAAD,EAAMC,KAAN,KAAgB;AACnD,YAAID,GAAJ,EAAS;AACP,iBAAOA,GAAG,CAACE,IAAJ,KAAa,QAAb,GACHN,OAAO,CAAC,KAAD,CADJ,GAEHC,MAAM,CAACG,GAAD,CAFV;AAGD;;AACDJ,QAAAA,OAAO,CAACK,KAAK,CAACE,MAAN,EAAD,CAAP;AACD,OAPD;AAQD,KATM,CAAP;AAUD;;AAEDf,EAAAA,EAAE,CAACU,IAAH,CAAQC,QAAQ,CAACP,QAAD,EAAWC,OAAX,CAAhB,EAAqC,CAACO,GAAD,EAAMC,KAAN,KAAgB;AACnD,QAAID,GAAJ,EAAS;AACP,aAAOA,GAAG,CAACE,IAAJ,KAAa,QAAb,GACHR,IAAI,CAAC,IAAD,EAAO,KAAP,CADD,GAEHA,IAAI,CAACM,GAAD,CAFR;AAGD;;AAEDN,IAAAA,IAAI,CAAC,IAAD,EAAOO,KAAK,CAACE,MAAN,EAAP,CAAJ;AACD,GARD;AASD;;AAEDZ,UAAU,CAACa,IAAX,GAAkB,SAASC,cAAT,CAAyBb,QAAzB,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AACjE,QAAMa,QAAQ,GAAGd,QAAQ,IAAI,EAA7B;;AACA,MAAI;AACF,WAAOJ,EAAE,CAACmB,QAAH,CAAYR,QAAQ,CAACO,QAAD,EAAWb,OAAX,CAApB,EAAyCU,MAAzC,EAAP;AACD,GAFD,CAGA,OAAOK,CAAP,EAAU;AACR;AACA;AACA,QAAIA,CAAC,CAACN,IAAF,IAAU,QAAd,EAAwB;AACtB,YAAMM,CAAN;AACD;;AAED,WAAO,KAAP;AACD;AACF,CAdD;;AAgBA,SAAST,QAAT,CAAmBP,QAAnB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzC,QAAMgB,IAAI,GAAGhB,OAAO,CAACgB,IAArB;AACA,SAAQA,IAAD,GAASnB,IAAI,CAACoB,IAAL,CAAUD,IAAV,EAAgBjB,QAAhB,CAAT,GAAqCA,QAA5C;AACD;;AAEDmB,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\nfunction fileExists (filepath, options, done) {\n  if (typeof options === 'function') {\n    done = options\n    options = {}\n  }\n\n  if (!done) {\n    return new Promise((resolve, reject) => {\n      fs.stat(fullPath(filepath, options), (err, stats) => {\n        if (err) {\n          return err.code === 'ENOENT'\n            ? resolve(false)\n            : reject(err)\n        }\n        resolve(stats.isFile())\n      })\n    })\n  }\n\n  fs.stat(fullPath(filepath, options), (err, stats) => {\n    if (err) {\n      return err.code === 'ENOENT'\n        ? done(null, false)\n        : done(err)\n    }\n\n    done(null, stats.isFile())\n  })\n}\n\nfileExists.sync = function fileExistsSync (filepath, options = {}) {\n  const filePath = filepath || '';\n  try {\n    return fs.statSync(fullPath(filePath, options)).isFile()\n  }\n  catch (e) {\n    // Check exception. If ENOENT - no such file or directory ok, file doesn't exist.\n    // Otherwise something else went wrong, we don't have rights to access the file, ...\n    if (e.code != 'ENOENT') {\n      throw e\n    }\n\n    return false\n  }\n}\n\nfunction fullPath (filepath, options = {}) {\n  const root = options.root\n  return (root) ? path.join(root, filepath) : filepath\n}\n\nmodule.exports = fileExists\n"]},"metadata":{},"sourceType":"script"}